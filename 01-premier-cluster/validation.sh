#!/bin/bash

set -e

echo "üîç Module 01: Validation Premier Cluster"
echo "========================================="
echo ""

FAILED=0

check() {
    if [ $? -eq 0 ]; then
        echo "‚úÖ $1"
    else
        echo "‚ùå $1"
        FAILED=$((FAILED + 1))
    fi
}

warning() {
    echo "‚ö†Ô∏è  $1"
}

# V√©rifier que le cluster existe
kubectl get cluster dev-cluster &>/dev/null
check "Cluster dev-cluster existe"

# V√©rifier la phase du cluster
PHASE=$(kubectl get cluster dev-cluster -o jsonpath='{.status.phase}' 2>/dev/null)
if [ "$PHASE" = "Provisioned" ]; then
    echo "‚úÖ Cluster phase = Provisioned"
else
    echo "‚ùå Cluster phase = $PHASE (attendu: Provisioned)"
    FAILED=$((FAILED + 1))
fi

# V√©rifier le control plane (r√©cup√©rer le nom dynamiquement)
CP_NAME=$(kubectl get cluster dev-cluster -o jsonpath='{.spec.controlPlaneRef.name}' 2>/dev/null)

if [ -z "$CP_NAME" ]; then
    echo "‚ùå Impossible de r√©cup√©rer le nom du control plane"
    FAILED=$((FAILED + 1))
else
    # V√©rifier que le control plane est initialis√© et disponible (pas n√©cessairement Ready car les nodes peuvent √™tre NotReady sans CNI)
    CP_INITIALIZED=$(kubectl get kubeadmcontrolplane "$CP_NAME" -o jsonpath='{.status.initialized}' 2>/dev/null)
    CP_REPLICAS=$(kubectl get kubeadmcontrolplane "$CP_NAME" -o jsonpath='{.spec.replicas}' 2>/dev/null)
    CP_UPDATED_REPLICAS=$(kubectl get kubeadmcontrolplane "$CP_NAME" -o jsonpath='{.status.updatedReplicas}' 2>/dev/null)

    if [ "$CP_INITIALIZED" = "true" ] && [ "$CP_UPDATED_REPLICAS" = "$CP_REPLICAS" ]; then
        echo "‚úÖ Control plane ready ($CP_UPDATED_REPLICAS/$CP_REPLICAS)"
    else
        echo "‚ùå Control plane not ready (initialized: $CP_INITIALIZED, updated: $CP_UPDATED_REPLICAS/$CP_REPLICAS)"
        FAILED=$((FAILED + 1))
    fi
fi

# V√©rifier les machines
MACHINE_COUNT=$(kubectl get machines -l cluster.x-k8s.io/cluster-name=dev-cluster --no-headers 2>/dev/null | wc -l)
RUNNING_COUNT=$(kubectl get machines -l cluster.x-k8s.io/cluster-name=dev-cluster -o jsonpath='{range .items[*]}{.status.phase}{"\n"}{end}' 2>/dev/null | grep -c "Running" || echo "0")

if [ "$MACHINE_COUNT" -eq 3 ] && [ "$RUNNING_COUNT" -eq 3 ]; then
    echo "‚úÖ 3 Machines en phase Running"
else
    echo "‚ùå Machines: $RUNNING_COUNT/3 Running (total: $MACHINE_COUNT)"
    FAILED=$((FAILED + 1))
fi

# V√©rifier le kubeconfig
if [ -f "dev-cluster.kubeconfig" ]; then
    echo "‚úÖ Kubeconfig r√©cup√©rable"
else
    # Essayer de r√©cup√©rer le kubeconfig automatiquement
    clusterctl get kubeconfig dev-cluster > dev-cluster.kubeconfig 2>/dev/null
    if [ -f "dev-cluster.kubeconfig" ]; then
        echo "‚úÖ Kubeconfig r√©cup√©rable"
    else
        echo "‚ùå Impossible de r√©cup√©rer le kubeconfig"
        FAILED=$((FAILED + 1))
    fi
fi

# V√©rifier les nodes dans le workload cluster
if [ -f "dev-cluster.kubeconfig" ]; then
    NODE_COUNT=$(kubectl --kubeconfig dev-cluster.kubeconfig get nodes --no-headers 2>/dev/null | wc -l)
    if [ "$NODE_COUNT" -eq 3 ]; then
        echo "‚úÖ 3 nodes visibles dans le workload cluster"
    else
        echo "‚ùå Nodes: $NODE_COUNT/3 visibles"
        FAILED=$((FAILED + 1))
    fi

    # V√©rifier l'√©tat des nodes (doivent √™tre NotReady sans CNI)
    READY_COUNT=$(kubectl --kubeconfig dev-cluster.kubeconfig get nodes --no-headers 2>/dev/null | grep -c " Ready " 2>/dev/null || true)

    if [ -z "$READY_COUNT" ] || [ "$READY_COUNT" -eq 0 ]; then
        echo "‚ö†Ô∏è  Nodes NotReady (normal - CNI manquant)"
    else
        echo "‚úÖ $READY_COUNT nodes Ready"
    fi
fi

echo ""
echo "========================================="
if [ $FAILED -eq 0 ]; then
    echo "üéâ Module 01 termin√© avec succ√®s!"
    echo "üöÄ Pr√™t pour Module 02: Networking avec Calico"
    echo "========================================="
    echo ""
    echo "Prochaine commande:"
    echo "  cd ../02-networking-calico"
    echo "  cat commands.md"
    exit 0
else
    echo "‚ùå $FAILED test(s) √©chou√©(s)"
    echo "========================================="
    echo ""
    echo "V√©rifiez les logs:"
    echo "  kubectl describe cluster dev-cluster"
    echo "  kubectl get machines"
    echo "  kubectl logs -n capi-system deployment/capi-controller-manager"
    exit 1
fi