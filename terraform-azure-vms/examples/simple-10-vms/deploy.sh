#!/bin/bash
# =============================================================================
# Script de d√©ploiement rapide - 10 VMs Azure
# =============================================================================
# Ce script automatise le d√©ploiement complet de l'infrastructure
# =============================================================================

set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Variables
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SSH_KEY_FILE="${SCRIPT_DIR}/workshop_key.pem"
INVENTORY_FILE="${SCRIPT_DIR}/inventory.txt"

# =============================================================================
# FONCTIONS
# =============================================================================

print_header() {
    echo -e "${BLUE}========================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}========================================${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

check_prerequisites() {
    print_header "V√©rification des pr√©requis"

    # Terraform
    if ! command -v terraform &> /dev/null; then
        print_error "Terraform n'est pas install√©"
        echo "Installation: https://developer.hashicorp.com/terraform/downloads"
        exit 1
    fi
    print_success "Terraform $(terraform version -json | jq -r '.terraform_version') d√©tect√©"

    # Azure CLI
    if ! command -v az &> /dev/null; then
        print_error "Azure CLI n'est pas install√©"
        echo "Installation: https://docs.microsoft.com/cli/azure/install-azure-cli"
        exit 1
    fi
    print_success "Azure CLI d√©tect√©"

    # Authentification Azure
    if ! az account show &> /dev/null; then
        print_error "Vous n'√™tes pas authentifi√© √† Azure"
        print_info "Ex√©cutez: az login"
        exit 1
    fi

    local subscription=$(az account show --query name -o tsv)
    print_success "Connect√© √† Azure: ${subscription}"

    # jq (optionnel)
    if ! command -v jq &> /dev/null; then
        print_warning "jq n'est pas install√© (optionnel pour parsing JSON)"
    fi
}

show_configuration() {
    print_header "Configuration du d√©ploiement"

    if [ -f "${SCRIPT_DIR}/terraform.tfvars" ]; then
        echo ""
        echo "Param√®tres d√©tect√©s dans terraform.tfvars:"
        echo ""
        grep -v "^#" "${SCRIPT_DIR}/terraform.tfvars" | grep -v "^$" | head -20
        echo ""
        print_warning "V√©rifiez ces param√®tres avant de continuer"
        echo ""
        read -p "Continuer avec cette configuration ? (y/N) " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_info "D√©ploiement annul√©. Modifiez terraform.tfvars et relancez."
            exit 0
        fi
    else
        print_warning "Fichier terraform.tfvars non trouv√©"
        print_info "Les valeurs par d√©faut de main.tf seront utilis√©es"
    fi
}

initialize_terraform() {
    print_header "Initialisation de Terraform"

    cd "${SCRIPT_DIR}"

    if [ -d ".terraform" ]; then
        print_info "Terraform d√©j√† initialis√©, mise √† jour..."
        terraform init -upgrade
    else
        print_info "Premi√®re initialisation..."
        terraform init
    fi

    print_success "Terraform initialis√©"
}

plan_deployment() {
    print_header "Planification du d√©ploiement"

    cd "${SCRIPT_DIR}"

    print_info "G√©n√©ration du plan d'ex√©cution..."
    terraform plan -out=tfplan

    print_success "Plan g√©n√©r√©"
    echo ""
    print_warning "V√©rifiez le plan ci-dessus avant de d√©ployer"
    echo ""
    read -p "Voulez-vous d√©ployer cette infrastructure ? (y/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_info "D√©ploiement annul√©"
        rm -f tfplan
        exit 0
    fi
}

deploy_infrastructure() {
    print_header "D√©ploiement de l'infrastructure"

    cd "${SCRIPT_DIR}"

    print_info "D√©ploiement en cours (3-5 minutes)..."
    echo ""

    local start_time=$(date +%s)

    terraform apply tfplan

    local end_time=$(date +%s)
    local duration=$((end_time - start_time))

    rm -f tfplan

    print_success "Infrastructure d√©ploy√©e en ${duration} secondes"
}

save_outputs() {
    print_header "R√©cup√©ration des informations de connexion"

    cd "${SCRIPT_DIR}"

    # Sauvegarder la cl√© SSH
    print_info "Sauvegarde de la cl√© SSH priv√©e..."
    terraform output -raw ssh_private_key > "${SSH_KEY_FILE}"
    chmod 600 "${SSH_KEY_FILE}"
    print_success "Cl√© SSH sauvegard√©e: ${SSH_KEY_FILE}"

    # Cr√©er l'inventaire
    print_info "Cr√©ation de l'inventaire des VMs..."
    if command -v jq &> /dev/null; then
        terraform output -json vm_public_ips | jq -r 'to_entries[] | "\(.key): \(.value)"' > "${INVENTORY_FILE}"
        print_success "Inventaire cr√©√©: ${INVENTORY_FILE}"
    else
        print_warning "jq non disponible, inventaire non cr√©√©"
    fi
}

display_summary() {
    print_header "R√©sum√© du d√©ploiement"

    cd "${SCRIPT_DIR}"

    echo ""
    echo -e "${GREEN}üéâ D√©ploiement termin√© avec succ√®s !${NC}"
    echo ""

    # Afficher les informations de connexion
    if terraform output vm_ssh_connections &> /dev/null; then
        echo -e "${BLUE}üìã Commandes de connexion SSH:${NC}"
        echo ""
        terraform output -json vm_ssh_connections | jq -r '.[]' | sed 's/^/  /'
        echo ""
    fi

    # R√©sum√© des ressources
    echo -e "${BLUE}üìä Ressources cr√©√©es:${NC}"
    terraform output -json deployment_info | jq -r 'to_entries[] | "  \(.key): \(.value)"' 2>/dev/null || echo "  Voir: terraform output deployment_info"
    echo ""

    # Instructions suivantes
    echo -e "${BLUE}üöÄ Prochaines √©tapes:${NC}"
    echo ""
    echo "  1. Tester la connexion SSH:"
    echo "     ssh -i ${SSH_KEY_FILE} azureuser@<IP-VM>"
    echo ""
    echo "  2. Voir toutes les sorties:"
    echo "     terraform output"
    echo ""
    echo "  3. Se connecter √† une VM sp√©cifique:"
    echo "     terraform output -raw ssh_private_key > key.pem && chmod 600 key.pem"
    echo "     ssh -i key.pem azureuser@\$(terraform output -json vm_public_ips | jq -r '.\"vm-01\"')"
    echo ""
    echo "  4. D√©truire l'infrastructure quand termin√©:"
    echo "     ./destroy.sh  # ou: terraform destroy"
    echo ""
}

test_connectivity() {
    print_header "Test de connectivit√© (optionnel)"

    echo ""
    read -p "Voulez-vous tester la connexion SSH aux VMs ? (y/N) " -n 1 -r
    echo

    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_info "Test de connectivit√© ignor√©"
        return
    fi

    cd "${SCRIPT_DIR}"

    print_info "Test des connexions SSH (peut prendre 1-2 minutes)..."
    echo ""

    local success=0
    local failed=0

    terraform output -json vm_public_ips | jq -r 'to_entries[] | "\(.key) \(.value)"' | while read vm_name vm_ip; do
        printf "  Testing %-15s (%s)... " "${vm_name}" "${vm_ip}"

        if timeout 10 ssh -i "${SSH_KEY_FILE}" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=5 -o LogLevel=ERROR azureuser@${vm_ip} "hostname" &> /dev/null; then
            echo -e "${GREEN}‚úÖ OK${NC}"
            ((success++))
        else
            echo -e "${RED}‚ùå FAILED${NC}"
            ((failed++))
        fi
    done

    echo ""
    if [ ${failed} -eq 0 ]; then
        print_success "Toutes les VMs sont accessibles"
    else
        print_warning "${success} VMs accessibles, ${failed} VMs en √©chec"
        print_info "Les VMs peuvent n√©cessiter quelques minutes suppl√©mentaires pour d√©marrer"
    fi
}

# =============================================================================
# MAIN
# =============================================================================

main() {
    clear

    print_header "D√©ploiement automatis√© - 10 VMs Azure"
    echo ""

    check_prerequisites
    echo ""

    show_configuration
    echo ""

    initialize_terraform
    echo ""

    plan_deployment
    echo ""

    deploy_infrastructure
    echo ""

    save_outputs
    echo ""

    display_summary

    test_connectivity

    echo ""
    print_success "Script termin√©"
}

# Ex√©cuter le script principal
main "$@"
