#!/bin/bash

set -e

echo "üîç Module 00: Validation Installation Outils"
echo "============================================="
echo ""

FAILED=0

check() {
    if [ $? -eq 0 ]; then
        echo "‚úÖ $1"
    else
        echo "‚ùå $1"
        FAILED=$((FAILED + 1))
    fi
}

check_version() {
    TOOL=$1
    VERSION=$2
    if [ -n "$VERSION" ] && [ "$VERSION" != "unknown" ]; then
        echo "‚úÖ $TOOL install√© (version $VERSION)"
    else
        echo "‚ùå $TOOL non trouv√©"
        FAILED=$((FAILED + 1))
    fi
}

# V√©rifier Docker
DOCKER_VERSION=$(docker --version 2>/dev/null | awk '{print $3}' | sed 's/,//')
check_version "Docker" "$DOCKER_VERSION"

# V√©rifier kind
KIND_VERSION=$(kind --version 2>/dev/null | awk '{print $3}')
check_version "kind" "$KIND_VERSION"

# V√©rifier kubectl
KUBECTL_VERSION=$(kubectl version --client --short 2>/dev/null | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+' | head -1)
if [ -z "$KUBECTL_VERSION" ]; then
    KUBECTL_VERSION=$(kubectl version --client 2>/dev/null | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+' | head -1)
fi
check_version "kubectl" "$KUBECTL_VERSION"

# V√©rifier kubectl plugins
kubectl ctx --help &>/dev/null
check "kubectl plugin: ctx install√©"

kubectl ns --help &>/dev/null
check "kubectl plugin: ns install√©"

kubectl slice --help &>/dev/null
check "kubectl plugin: slice install√©"

kubectl klock --help &>/dev/null
check "kubectl plugin: klock install√©"

# V√©rifier clusterctl
CLUSTERCTL_VERSION=$(clusterctl version 2>/dev/null | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+' | head -1)
check_version "clusterctl" "$CLUSTERCTL_VERSION"

# V√©rifier Helm
HELM_VERSION=$(helm version --short 2>/dev/null | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+' | head -1)
check_version "Helm" "$HELM_VERSION"

# V√©rifier jq
JQ_VERSION=$(jq --version 2>/dev/null | sed 's/jq-//')
check_version "jq" "$JQ_VERSION"

# V√©rifier yq
YQ_VERSION=$(yq --version 2>/dev/null | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+' | head -1 | sed 's/v//')
check_version "yq" "$YQ_VERSION"

# V√©rifier tree
TREE_VERSION=$(tree --version 2>/dev/null | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+' | head -1 | sed 's/v//')
if [ -z "$TREE_VERSION" ]; then
    TREE_VERSION=$(tree --version 2>/dev/null | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1)
fi
check_version "tree" "$TREE_VERSION"

echo ""
echo "============================================="
echo "üîç V√©rification des limites syst√®me"
echo "============================================="
echo ""

# D√©tecter l'OS
OS_TYPE=$(uname -s)

if [ "$OS_TYPE" = "Linux" ]; then
    # V√©rifier les limites kernel Linux
    INOTIFY_WATCHES=$(sysctl -n fs.inotify.max_user_watches 2>/dev/null || echo "0")
    INOTIFY_INSTANCES=$(sysctl -n fs.inotify.max_user_instances 2>/dev/null || echo "0")
    FILE_MAX=$(sysctl -n fs.file-max 2>/dev/null || echo "0")
    PID_MAX=$(sysctl -n kernel.pid_max 2>/dev/null || echo "0")
    SOMAXCONN=$(sysctl -n net.core.somaxconn 2>/dev/null || echo "0")

    # V√©rifier fs.inotify.max_user_watches (minimum 524288)
    if [ "$INOTIFY_WATCHES" -ge 524288 ]; then
        echo "‚úÖ fs.inotify.max_user_watches: $INOTIFY_WATCHES (>= 524288)"
    else
        echo "‚ùå fs.inotify.max_user_watches: $INOTIFY_WATCHES (requis >= 524288)"
        FAILED=$((FAILED + 1))
    fi

    # V√©rifier fs.inotify.max_user_instances (minimum 512)
    if [ "$INOTIFY_INSTANCES" -ge 512 ]; then
        echo "‚úÖ fs.inotify.max_user_instances: $INOTIFY_INSTANCES (>= 512)"
    else
        echo "‚ùå fs.inotify.max_user_instances: $INOTIFY_INSTANCES (requis >= 512)"
        FAILED=$((FAILED + 1))
    fi

    # V√©rifier fs.file-max (minimum 2097152)
    if [ "$FILE_MAX" -ge 2097152 ]; then
        echo "‚úÖ fs.file-max: $FILE_MAX (>= 2097152)"
    else
        echo "‚ùå fs.file-max: $FILE_MAX (requis >= 2097152)"
        FAILED=$((FAILED + 1))
    fi

    # V√©rifier kernel.pid_max (minimum 4194304)
    if [ "$PID_MAX" -ge 4194304 ]; then
        echo "‚úÖ kernel.pid_max: $PID_MAX (>= 4194304)"
    else
        echo "‚ùå kernel.pid_max: $PID_MAX (requis >= 4194304)"
        FAILED=$((FAILED + 1))
    fi

    # V√©rifier net.core.somaxconn (minimum 32768)
    if [ "$SOMAXCONN" -ge 32768 ]; then
        echo "‚úÖ net.core.somaxconn: $SOMAXCONN (>= 32768)"
    else
        echo "‚ùå net.core.somaxconn: $SOMAXCONN (requis >= 32768)"
        FAILED=$((FAILED + 1))
    fi

    # V√©rifier ulimit -n (minimum 1048576)
    NOFILE_LIMIT=$(ulimit -n 2>/dev/null || echo "0")
    if [ "$NOFILE_LIMIT" = "unlimited" ] || [ "$NOFILE_LIMIT" -ge 1048576 ]; then
        echo "‚úÖ ulimit -n (open files): $NOFILE_LIMIT (>= 1048576)"
    else
        echo "‚ùå ulimit -n (open files): $NOFILE_LIMIT (requis >= 1048576)"
        FAILED=$((FAILED + 1))
    fi

elif [ "$OS_TYPE" = "Darwin" ]; then
    # V√©rifier les limites macOS
    MAXFILES=$(launchctl limit maxfiles 2>/dev/null | awk '{print $2}')
    NOFILE_LIMIT=$(ulimit -n 2>/dev/null || echo "0")

    if [ "$MAXFILES" -ge 1048576 ] 2>/dev/null; then
        echo "‚úÖ launchctl maxfiles: $MAXFILES (>= 1048576)"
    else
        echo "‚ùå launchctl maxfiles: $MAXFILES (requis >= 1048576)"
        FAILED=$((FAILED + 1))
    fi

    if [ "$NOFILE_LIMIT" = "unlimited" ] || [ "$NOFILE_LIMIT" -ge 1048576 ] 2>/dev/null; then
        echo "‚úÖ ulimit -n (open files): $NOFILE_LIMIT (>= 1048576)"
    else
        echo "‚ùå ulimit -n (open files): $NOFILE_LIMIT (requis >= 1048576)"
        FAILED=$((FAILED + 1))
    fi
fi

# V√©rifier Docker daemon
docker info &>/dev/null
if [ $? -eq 0 ]; then
    echo "‚úÖ Docker daemon accessible et en cours d'ex√©cution"
else
    echo "‚ùå Docker daemon non accessible (est-il d√©marr√©?)"
    FAILED=$((FAILED + 1))
fi

echo ""
echo "============================================="
if [ $FAILED -eq 0 ]; then
    echo "üéâ Module 00 termin√© avec succ√®s!"
    echo "üöÄ Tous les outils et limites syst√®me sont pr√™ts"
    echo "============================================="
    echo ""
    echo "Prochaine commande:"
    echo "  cd ../00-setup-management"
    echo "  cat commands.md"
    exit 0
else
    echo "‚ùå $FAILED test(s) √©chou√©(s)"
    echo "============================================="
    echo ""
    echo "üìã Actions √† effectuer:"
    if [ "$OS_TYPE" = "Linux" ]; then
        echo "  1. Configurer les limites syst√®me: voir √âtape 11 dans commands.md"
        echo "  2. Red√©marrer votre session ou ex√©cuter: sudo sysctl -p"
        echo "  3. Relancer: ./verification.sh"
    elif [ "$OS_TYPE" = "Darwin" ]; then
        echo "  1. Configurer les limites macOS: voir √âtape 11 dans commands.md"
        echo "  2. Red√©marrer votre session"
        echo "  3. Relancer: ./verification.sh"
    fi
    echo ""
    echo "Retournez dans commands.md pour installer les outils manquants."
    exit 1
fi